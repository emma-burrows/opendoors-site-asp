@model PagedList.IPagedList<OpenDoors.Models.Author>
@using System.Text.RegularExpressions
@using System.Xml.Linq
@using PagedList;
@using PagedList.Mvc;
@using OpenDoors.Code

@{
  var config = (OpenDoors.Models.ArchiveConfig)TempData["config"];
  ViewBag.Title = config.Name + " Authors";
  Layout = "~/Views/_LayoutPage.cshtml";
  var letters = (List<String>)TempData["letters"];
  var currentLetter = Request.QueryString["letter"] ?? letters.First();
  int authorWithMessage = -1;
  ArchiveResult result = null;
  if (TempData["result"] != null)
  {
    result = (OpenDoors.Code.ArchiveResult)TempData["result"];
    if (result.Messages.Count > 0 && result.Messages.Exists(x => x.StartsWith("author-")))
    {
      Regex rxNonDigits = new Regex(@"[^\d]+");
      authorWithMessage = Int32.Parse(rxNonDigits.Replace(result.Messages.Find(x => x.StartsWith("author-")), ""));
    }
  }
}

<!-- PAGINATION TOP -->
<div class="center">
  <div class="pagination-container">
    <ul class="pagination">
    
      @foreach(string c in letters)
      {
        <li class="@(currentLetter == c ? "active" : "")">@Html.ActionLink(c.ToString(),
                    "Index",
                    "Author",
                    new { letter = c, page = 1, pageSize = Model.PageSize },
                    new { })
        </li>
      }
    </ul>
  </div>
</div>

<div class="center">
  @Html.PagedListPager(Model, page => Url.Action("Index", 
    new { letter = Request.QueryString["letter"], page, pageSize = Model.PageSize }))
</div>

<!-- AUTHORS LIST -->
<div class="row">
  @foreach (var author in Model.OrderBy(item => item.Name))
  {
    int storyCount = author.Stories.Count;
    int bookmarkCount = author.Bookmarks.Count;
    bool hasStories = storyCount > 0;
    bool hasBookmarks = bookmarkCount > 0;
    bool hasCoAuthoredStories = author.CoAuthoredStories.Count > 0;
    
    if(hasBookmarks || hasStories) {
      bool doNotImport = Convert.ToBoolean(author.DoNotImport || (author.Stories.All(s => s.DoNotImport) && author.Bookmarks.All(b => b.DoNotImport)));
      bool imported = Convert.ToBoolean(author.Imported || (author.Stories.All(s => s.Imported) && author.Bookmarks.All(b => b.Imported)));
      string cssClass = imported ? "imported" : "";
      cssClass += doNotImport ? "donotimport" : "";
      string collapse = (imported || doNotImport) ? "collapse" : "expanded";

      <!-- AUTHOR -->
      <article class="col-md-12 @cssClass" id="@author.ID">
        <!-- author header block -->
        <a name="@author.Name"></a>
        <div class="row">
          <!-- author name -->
          <div class="col-md-4 col-sm-3 author-name">
            <a href="#items-@author.ID" data-toggle="collapse">
              <h2>@Html.DisplayFor(modelItem => author.Name)</h2>
              <div>@storyCount stories - @bookmarkCount bookmarks</div>
            </a>
          </div>
          <!-- buttons -->
          <div class="col-md-8 col-sm-9 extra-space">
            @if (!doNotImport && !imported)
            {
              if (hasStories)
              {
                @Html.ActionLink("import all stories",
                  "ImportAll",
                  "Author",
                  new
                  {
                    id = author.ID,
                    letter = Request.QueryString["letter"],
                    page = Model.PageNumber,
                    pageSize = Model.PageSize,
                    type = OtwArchive.Models.Request.ImportSettings.ImportType.Work
                  },
                  new {@class = "btn btn-info"})
              }
              if (hasBookmarks)
              {
                @Html.ActionLink("import all bookmarks",
                  "ImportAll",
                  "Author",
                  new
                  {
                    id = author.ID,
                    letter = Request.QueryString["letter"],
                    page = Model.PageNumber,
                    pageSize = Model.PageSize,
                    type = OtwArchive.Models.Request.ImportSettings.ImportType.Bookmark
                  },
                  new {@class = "btn btn-info"})
              }
            }
            @Html.ActionLink(doNotImport ? "allow importing all" : "do NOT import all",
              "ImportNone",
              "Author",
              new
              {
                id = author.ID, doNotImport = !doNotImport,
                letter = Request.QueryString["letter"],
                page = Model.PageNumber,
                pageSize = Model.PageSize
              },
              new
              {
                @class = "btn btn-custom",
                onclick = doNotImport ?
                  "return confirm('Are you sure this author should ALLOW imports?\\n\\nThis will also make all their works importable.');" :
                  "return confirm('Are you sure this author should NOT ALLOW imports?\\n\\nThis will also set all their works to Do Not Import.');"
              })

            @Html.ActionLink("check all imported",
              "CheckAll",
              "Author",
              new
              {
                id = author.ID,
                letter = Request.QueryString["letter"],
                page = Model.PageNumber,
                pageSize = Model.PageSize
              },
              new {@class = "btn btn-success"})
            <br/>
          </div>
          <!-- messages -->
          @if (result != null && result.Messages.Count > 0 && authorWithMessage == author.ID)
          {
            var messages = new List<string>(result.Messages);
            messages.RemoveAll(x => x == "error" || x.StartsWith("author-"));
            <br/>
            <div class="message-info @(result.Messages.Contains("error") ? "bg-danger" : "bg-info")">
              @foreach (string s in messages)
              {
                <p>@Html.Raw(s)</p>
              }
            </div>
            <br/>
          }
        </div>
        <!-- ITEMS -->
        <div id="items-@author.ID" class="@collapse">
          <hr/>
          @if (hasStories)
          {
            ViewData["type"] = "Story";
            <h3>Stories</h3>
            foreach (var story in author.Stories.OrderBy(s => s.Title))
            {
              @Html.Partial("_Meta", story, ViewData)
            }
          }

          @if (hasBookmarks)
          {
            ViewData["type"] = "Bookmark";
            <h3>Bookmarks</h3>
            foreach (var bookmark in author.Bookmarks.OrderBy(s => s.Title))
            {
              @Html.Partial("_Meta", bookmark, ViewData)
            }
          }

          @if (hasCoAuthoredStories)
          {
            ViewData["type"] = "CoAuthoredStory";
            <h3>Co-authored stories</h3>
            foreach (var coAuthoredStory in author.CoAuthoredStories.OrderBy(s => s.Title))
            {
              @Html.Partial("_Meta", coAuthoredStory, ViewData)
            }
          }

          @if (author.Stories.Count + author.Bookmarks.Count == 0)
          {
            <span>No bookmarks, stories or co-authored stories.</span>
          }
        </div>
      </article>
    }
  }
</div>

<div class="center">
  @Html.PagedListPager(Model, page => Url.Action("Index",
    new {letter = Request.QueryString["letter"], page, pageSize = Model.PageSize}))
</div>

<div class="center">
  <div class="pagination-container">
    <ul class="pagination">
      @foreach(string c in letters)
      {
        <li class="@(currentLetter == c ? "active" : "")">@Html.ActionLink(c.ToString(),
                    "Index",
                    "Author",
                    new { letter = c, page = 1, pageSize = Model.PageSize },
                    new { })
        </li>
      }
    </ul>
  </div>
</div>

