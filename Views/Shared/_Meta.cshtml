@using System.Web.UI.WebControls
@{
  var controller = ViewContext.RouteData.GetRequiredString("controller");
  var hasBookmarkResult = false;
  var hasStoryResult = false;
 
  OpenDoors.Code.IItemResponse itemResponse = null;
  // Process Archive results
  if (TempData["result"] != null)
  {
    var result = (OpenDoors.Code.ArchiveResult)TempData["result"];
    // Stories
    hasStoryResult = ViewData["type"] == "Story" && result.StoryResponses != null
                     && result.StoryResponses.Exists(i => i.OriginalId == Model.ID.ToString());
    hasBookmarkResult = ViewData["type"] == "Bookmark" && result.BookmarkResponses != null
                        && result.BookmarkResponses.Exists(i => i.OriginalId == Model.ID.ToString());
    if (hasStoryResult)
    {
      itemResponse = (OpenDoors.Code.IItemResponse)result.StoryResponses.Find(s => s.OriginalId == Model.ID.ToString());
    }
    else if (hasBookmarkResult)
    {
      itemResponse = result.BookmarkResponses.Find(s => s.OriginalId == Model.ID.ToString()) as OpenDoors.Code.IItemResponse;
    }
  }

  bool isAuthorView = Convert.ToBoolean(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString() == "Author");
  bool isStory = ViewData["type"] == "Story";
  String itemType = isStory ? "Story" : "Bookmark";
  
  bool isCoAuthoredStory = ViewData["type"] == "CoAuthoredStory";

  bool doNotImport = Convert.ToBoolean(Model.DoNotImport);
  bool brokenLink = isStory ? false : Convert.ToBoolean(Model.BrokenLink);
  bool imported = Convert.ToBoolean(Model.Imported) || (itemResponse != null && itemResponse.Status == "ok");


  bool hasCoAuthor = isStory && Model.CoAuthorID != null && Model.CoAuthorID != 0;
  
  int id = Model.ID;
  string cssClass = imported ? "imported" : "";
  cssClass += doNotImport ? " donotimport" : "";
  cssClass += " " + ViewData["type"];

  <div class="row storytitlediv @cssClass" id="@id">
    <div class="col-lg-6 col-md-7 col-sm-6 storytitle">
      @if (String.IsNullOrEmpty(Model.Url) && Model.Chapters.Count > 0)
      {
        <span>@OpenDoors.StringHelper.notLibrary(Model.Title)</span>
      }
      else
      {
        if (isStory || isCoAuthoredStory)
        {
          <a href="@Url.Content("~/works/" + Model.Url)">@OpenDoors.StringHelper.notLibrary(Model.Title)</a>
        }
        else
        {
          <a href="@Url.Content(Model.Url)">@OpenDoors.StringHelper.notLibrary(Model.Title)</a>
        }
      }
      @if (!isAuthorView || hasCoAuthor)
      {
        <span>by <b>@Model.Author.Name</b>
          @if (hasCoAuthor)
          {
            <span>and <b>@Model.CoAuthor.Name</b></span>
          }
        </span>
      }<br />
      <span class="summary">[@Model.Rating] 
        @if (!String.IsNullOrEmpty(Model.Categories))
        { <span>- @Model.Categories</span> }
        @if (!String.IsNullOrEmpty(Model.Fandoms))
        { <span>- @Model.Fandoms</span> }
        <br />

        @if (Model.Date != null)
        { <span><b>Date:</b> @Model.Date.ToString("yyyy-MM-dd")
          @if (isStory && Model.Updated != null)
          { <span>- 
             <b>Updated:</b> @Model.Updated.ToString("yyyy-MM-dd")
             </span> }</span><br /> }

        @if (!String.IsNullOrEmpty(Model.Warnings))
        { <span><b>Warnings:</b> @Model.Warnings</span><br /> }
        @if (!String.IsNullOrEmpty(Model.Relationships))
        { <span><b>Relationships:</b> @Model.Relationships</span><br /> }
        @if (!String.IsNullOrEmpty(Model.Characters))
        { <span><b>Characters:</b> @Model.Characters</span><br/> }
        @if (!String.IsNullOrEmpty(Model.Tags))
        { <span><b>Tags:</b> @Model.Tags</span><br/> }
      </span>

      <span class="summary">@Html.Raw(Model.Summary)</span><br />

      @if (isStory)
      {
        <ol>
          @foreach (OpenDoors.Models.Chapter chapter in Model.Chapters)
          {
            if (String.IsNullOrEmpty(chapter.Url))
            {
            <li>
          @Html.ActionLink(
            linkText: (string)OpenDoors.StringHelper.notLibrary(chapter.Title),
            actionName: "Details",
            controllerName: "Chapter",
            routeValues: new { id = chapter.ID },
            htmlAttributes: new { })
          </li>
        }
        else
        {
          <li><a href="@Url.Content("~/works/" + chapter.Url)">@chapter.Title</a></li>
        }
      }
      </ol>
      }

      @if (hasStoryResult || hasBookmarkResult)
       {
        <div class="message-info @(itemResponse.Status == "unprocessable_entity" ? "bg-danger" : "bg-info")">
          <ul>
            @foreach (string s in itemResponse.Messages)
            {
              <li>@Html.Raw(s)</li>
            }
          </ul>
        </div>
      }
    </div>

    @if (!isCoAuthoredStory)
    {
      <div class="col-lg-6 col-md-5 col-sm-6 links">
        @if (imported)
        {
          if (!String.IsNullOrEmpty(Model.Ao3Url))
          {
            <a href="@Model.Ao3Url" target="_blank">view on AO3</a>
          }
        }
        else if (!doNotImport)
        {
          @Html.ActionLink(
            linkText: "import", 
            actionName: "Import", 
            controllerName: controller,
            routeValues: new
            {
              id = Model.ID,
              letter = Request.QueryString["letter"],
              page = Request.QueryString["page"],
              pageSize = Request.QueryString["pageSize"],
              type = ViewData["type"]
            },
            htmlAttributes: new {@class = "btn btn-info"})
        }
        <span></span>
        @Html.ActionLink(
          linkText: imported ? "mark NOT imported" : "mark as imported", 
          actionName: "Edit", 
          controllerName: itemType,
          routeValues: new {id = Model.ID, imported = !imported},
          htmlAttributes: new
          {
            @class = "btn btn-success",
            onclick = doNotImport ? 
              String.Format("return confirm('Are you sure this {0} has NOT been imported?');", itemType.ToLower()) :
              String.Format("return confirm('Are you sure this {0} has BEEN imported?');", itemType.ToLower())
          })
        <span></span>

        @Html.ActionLink(doNotImport ? "allow importing" : "do NOT import", 
          actionName: "Edit", 
          controllerName: itemType,
          routeValues: new {id = Model.ID, donotimport = !doNotImport},
          htmlAttributes: new {
            @class = "btn btn-warning", 
            title = "Mark as to be imported",
            onclick = doNotImport ? 
              String.Format("return confirm('Are you sure this {0} should ALLOW imports?');", itemType.ToLower()) :
              String.Format("return confirm('Are you sure this {0} should NOT be imported?');", itemType.ToLower())
            }
         )
	@if (!isStory)
        {
          @Html.ActionLink(brokenLink ? "mark link broken" : "mark link NOT broken", "Edit", "Bookmark",
            new {id = Model.ID, brokenLink = !brokenLink},
            new {@class = "btn btn-warning", title = brokenLink ? "Mark bookmarked link as NOT broken" : "Mark bookmarked link as broken"})
        }
        <!-- div>
          @Html.TextArea("importNotes", (string) Model.ImportNotes, new {name = "importNotes", rows = 5})
        </div -->
      </div>

    }
  </div>
}
